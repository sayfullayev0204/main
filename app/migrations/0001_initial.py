# Generated by Django 5.1.6 on 2025-05-29 03:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Apartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('area', models.FloatField()),
            ],
            options={
                'verbose_name': 'Uy',
                'verbose_name_plural': 'Uylar',
            },
        ),
        migrations.CreateModel(
            name='FieldWork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
            options={
                'verbose_name': "Ish yoki o'qish joyi",
                'verbose_name_plural': "Ishyoki o'qish joyi",
            },
        ),
        migrations.CreateModel(
            name='GoalLeaave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
            options={
                'verbose_name': 'Ketish maqsadi',
                'verbose_name_plural': 'Ketish maqsadi',
            },
        ),
        migrations.CreateModel(
            name='Nation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PersonalCategroy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
            options={
                'verbose_name': 'Shaxsiy toifasi',
                'verbose_name_plural': 'Shaxsiy toifalari',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
            options={
                'verbose_name': 'Davlat',
                'verbose_name_plural': 'Davlat',
            },
        ),
        migrations.CreateModel(
            name='Citizn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(max_length=50)),
                ('birthday', models.DateTimeField()),
                ('phone', models.CharField(max_length=50)),
                ('gender', models.CharField(blank=True, choices=[('male', 'male'), ('female', 'female')], max_length=50, null=True)),
                ('jshshir', models.IntegerField()),
                ('photo', models.ImageField(blank=True, null=True, upload_to='citizens/')),
                ('marital_status', models.CharField(blank=True, choices=[('oilali', 'oilali'), ('uyalnmagan', 'uyalnmagan'), ('beva', 'beva'), ('ajrashgan', 'ajrashgan')], max_length=50, null=True)),
                ('children_count', models.IntegerField()),
                ('income_level', models.CharField(blank=True, choices=[('past', 'past'), ("o'rta", "o'rta"), ('yuqori', 'yuqori')], max_length=50, null=True)),
                ('workplace', models.TextField()),
                ('employment_status', models.CharField(blank=True, choices=[('ishsiz', 'ishsiz'), ('ishlaydigan', 'ishlaydigan'), ('pensioner', 'pensioner'), ('talaba', 'talaba')], max_length=50, null=True)),
                ('house_ownership', models.CharField(blank=True, choices=[("o'zida", "o'zida"), ('ijarada', 'ijarada'), ('uysiz', 'uysiz')], max_length=50, null=True)),
                ('street', models.CharField(max_length=300)),
                ('home', models.CharField(max_length=300)),
                ('is_at_risk', models.BooleanField(default=False)),
                ('needs_support', models.BooleanField(default=False)),
                ('under_supervision', models.BooleanField(default=False)),
                ('landlord', models.BooleanField(default=False)),
                ('apartment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='citizens', to='app.apartment')),
                ('nation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.nation')),
            ],
        ),
        migrations.CreateModel(
            name='PersonalStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.personalcategroy')),
                ('citzen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personal_statuses', to='app.citizn')),
            ],
            options={
                'verbose_name': 'Shaxsiy holati',
                'verbose_name_plural': 'Shaxsiy holatlari',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='app.region')),
            ],
        ),
        migrations.CreateModel(
            name='Leave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_add_date', models.DateTimeField()),
                ('end_add_date', models.DateTimeField()),
                ('start_leave_date', models.DateTimeField()),
                ('end_leave_date', models.DateTimeField()),
                ('deadline', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('start_come_date', models.DateTimeField()),
                ('end_come_date', models.DateTimeField()),
                ('reason_come', models.TextField()),
                ('deport', models.BooleanField(default=False)),
                ('violation', models.BooleanField()),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaves', to='app.citizn')),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.goalleaave')),
                ('work_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.fieldwork')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.state')),
            ],
            options={
                'verbose_name': 'Tark etish',
                'verbose_name_plural': 'Tark etish',
            },
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='villages', to='app.district')),
            ],
        ),
        migrations.AddField(
            model_name='citizn',
            name='Village',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='citizens', to='app.village'),
        ),
        migrations.AddField(
            model_name='apartment',
            name='village',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='apartments', to='app.village'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('region_admin', 'region_admin'), ('district_admin', 'district_admin'), ('inspector', 'inspector')], max_length=50)),
                ('birthday', models.DateTimeField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'male'), ('fmale', 'fmale')], max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('address', models.CharField(blank=True, max_length=50, null=True)),
                ('rank', models.CharField(blank=True, max_length=50, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='users/')),
                ('jshshir', models.IntegerField(blank=True, null=True, unique=True, verbose_name='JSHSHIR')),
                ('position', models.CharField(blank=True, max_length=50, null=True)),
                ('work_addres', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('nation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='app.nation')),
                ('village', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.village')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
